services:
  mongo:
    image: mongo:latest
    container_name: mongo
    environment:
      MONGO_INITDB_DATABASE: "APDV"
    networks:
      - dagster_network
    ports:
      - "27018:27017"
    volumes:
      - mongo-data:/data/db

  postgres:
    image: postgres:11
    container_name: postgres_workflow
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: "postgres_user"
      POSTGRES_PASSWORD: "postgres_password"
      POSTGRES_DB: "postgres_db"
    networks:
      - dagster_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user -d postgres_db"]
      interval: 10s
      timeout: 8s
      retries: 5

  dash_app:
    build:
      context: ./dash_app
      dockerfile: Dockerfile
    container_name: dash_app
    environment:
      MONGO_DB_URI: "mongodb://mongo:27017"
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
      DAGSTER_CURRENT_IMAGE: "workflow_code_image"
    restart: always
    depends_on:
      - workflow
    expose:
      - 8070
    ports:
      - "8070:8070"
    networks:
      - dagster_network

  workflow:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: workflow
    image: workflow_code_image
    environment:
      MONGO_DB_URI: "mongodb://mongo:27018"
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
      DAGSTER_CURRENT_IMAGE: "workflow_code_image"
#    volumes:
#      - ${HOME_DIR}/data:/opt/dagster/app/data
#      - ${HOME_DIR}/notebooks:/opt/dagster/app/notebooks
#      - ${HOME_DIR}/notebooks/output:/opt/dagster/app/notebooks/output
    restart: always
    networks:
      - dagster_network

  dagster_webserver:
    build:
      args:
        HOST_DIR: $PWD
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: dagster_webserver
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
      MONGO_DB_URI: "mongodb://mongo:27018"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
#      - ${HOME_DIR}/data:/opt/dagster/dagster_home/data
#      - ${HOME_DIR}/notebooks:/opt/dagster/dagster_home/notebooks
#      - ${HOME_DIR}/notebooks/output:/opt/dagster/dagster_home/notebooks/output
    networks:
      - dagster_network
    depends_on:
      postgres:
        condition: service_healthy
      workflow:
        condition: service_started


  dagster_daemon:
    build:
#      args:
#        HOST_DIR: $PWD
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
#      - ${HOME_DIR}/data:/opt/dagster/dagster_home/data
#      - ${HOME_DIR}/notebooks:/opt/dagster/dagster_home/notebooks
#      - ${HOME_DIR}/notebooks/output:/opt/dagster/dagster_home/notebooks/output
    networks:
      - dagster_network
    depends_on:
      postgres:
        condition: service_healthy
      workflow:
        condition: service_started

networks:
  dagster_network:
    driver: bridge
    name: dagster_network

volumes:
  mongo-data: